{"version":3,"sources":["relmodel.js","components/RelVisualization.js","components/RelCircle.js","components/RelIntro.js","components/ProbabilityGraph.js","components/EntropyGraph.js","components/RelationalityGraph.js","components/RelDefinition.js","components/RelColor.js","components/RelTemperature.js","components/App.js","serviceWorker.js","index.js"],"names":["RelModel","length","_this","this","colorCoefficient","arguments","undefined","numDice","bitStrength","colorShiftStrength","Object","classCallCheck","nodes","bits","dice","diceIndex","maxEntropy","Math","log1p","minEntropy","i","stability","color","random","targets","Array","from","sum","max","entropy","entropyDeltas","j","normalize","node","forEach","t","abs","concat","reverse","slice","map","e","step","console","error","diceRoll","counter","push","source","target","complete","bitStep","filter","bit","bitColor","nodeColor","similarity","colorShift","RelVisualization","PropTypes","func","shape","object","string","number","arrayOf","_ref","width","height","relModel","getPosition","react_default","a","createElement","id","xmlns","xmlnsXlink","bitPlacement","x","y","key","style","fill","cx","cy","r","_ref2","_getPosition","zIndex","RelCircle","props","possibleConstructorReturn","getPrototypeOf","call","state","numNodes","relIndex","stepTimer","bitTimer","restartTimer","bind","assertThisInitialized","n","_this$props","radius","center","sin","PI","cos","runStep","_this$state","setState","runBits","restart","_assertThisInitialize","clearInterval","setInterval","_this2","_this$props2","restartInterval","prevProps","prevState","_this$state2","_this$props3","_this$state3","styles","container","components_RelVisualization","Component","padding","sliderContainer","margin","ProbabilityGraph","l","val","EntropyGraph","reduce","RelationalityGraph","entropyDeltaRange","stroke","strokeWidth","points","d","join","x1","y1","x2","y2","RelDefinition","showProbabilities","IconButton","aria-label","onClick","Replay_default","fontSize","text","components_ProbabilityGraph","href","components_EntropyGraph","components_RelationalityGraph","display","flexDirection","alignItems","marginTop","marginBottom","App","pageContainer","className","paragraph","components_RelDefinition","paddingBottom","fontFamily","maxWidth","textAlign","explainer","fontStyle","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d53adee0.chunk.js","sourcesContent":["export default class RelModel {\n\n  constructor (length, colorCoefficient = .1, numDice = 1, bitStrength = 2, colorShiftStrength = 1) {\n    this.nodes = []\n    this.bits = []\n    this.dice = []\n    this.diceIndex = 0\n    this.maxEntropy = Math.log1p(1/length) * length ^ 2\n    this.minEntropy = Math.log1p(1) * length\n\n    for (var i = 0; i < length; i++) {\n      this.nodes[i] = {\n        stability: 0,\n        color: Math.random() * 360,\n        targets: Array.from({length}, () => 1/length),\n        sum: .1 * length,\n        max: .1,\n        entropy: [],\n        entropyDeltas: []\n      }\n    }\n\n    for (var j=0; j < numDice; j++) {\n      this.dice[j] = Math.random()\n    }\n\n    this.normalize = (node) => {\n      let sum = 0\n      node.max = 0\n      let entropy = 0\n      node.targets.forEach(t => sum += t)\n      for (var i = 0; i < length; i++) {\n        node.targets[i] = node.targets[i]/sum\n        entropy += Math.abs(Math.log1p(node.targets[i]))\n        if (node.targets[i] > node.max) {\n          node.max = node.targets[i]\n        }\n      }\n      node.entropy = node.entropy.concat(entropy).reverse().slice(0,100).reverse()\n      node.entropyDeltas = node.entropy.map(\n        (e, i) => i > 4\n        ? e - node.entropy[i-4]\n        : 0\n      ).slice(4, 100)\n    }\n\n    this.step = (i) => {\n      const node = this.nodes[i]\n      if (!node) {\n        console.error('Node not found');\n        debugger;\n      }\n\n      const diceRoll = this.diceIndex >= this.dice.length ? Math.random() : this.dice[this.diceIndex]\n      this.diceIndex++\n      var j\n      var counter = 0\n      for (j = 0; j < length - 1; j++) {\n        counter += node.targets[j]\n        if (counter > diceRoll && i !== j) {\n          break;\n        }\n      }\n      if (i===j) {\n        j = 0\n      }\n      this.bits.push({\n        source: i,\n        target: j,\n        color: node.color,\n        complete: 0\n      })\n\n      this.normalize(this.nodes[i])\n    }\n\n    this.bitStep = () => {\n      this.bits = this.bits.filter(bit => bit.complete < 100)\n      for (var i = 0; i < this.bits.length; i++) {\n        const bit = this.bits[i]\n        bit.complete += 1\n        if (bit.complete === 100) {\n          const bitColor = bit.color\n          const nodeColor = this.nodes[bit.target].color\n          const similarity = (360 - Math.abs(bitColor - nodeColor)) * colorCoefficient\n          this.nodes[bit.target].targets[bit.source] += similarity/700 * bitStrength\n          this.normalize(this.nodes[bit.target])\n\n          const colorDelta = ((Math.abs(bitColor - nodeColor) + 360) % 360)/2\n          const colorSign = bitColor > nodeColor ? 1 : -1\n\n          const colorShift = colorDelta * colorSign / 30\n          this.nodes[bit.target].color = (this.nodes[bit.target].color + colorShift * colorShiftStrength) % 360\n        }\n      }\n    }\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RelVisualization = ({width, height, bits, relModel, getPosition, entropy = []}) => <svg id=\"visualization\"\n  width={width}\n  height={height}\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n  {\n    bits.map((bit, i) => {\n      const source = getPosition(bit.source)\n      const target = getPosition(bit.target)\n      const bitPlacement = {\n        x: source.x + (target.x - source.x) * bit.complete/100,\n        y: source.y + (target.y - source.y) * bit.complete/100\n      }\n      return <circle key={'bit' + i} style={{fill:`hsl(${bit.color}, 100%, 50%)`}} cx={bitPlacement.x} cy={bitPlacement.y} r=\"2\"/>\n    })\n  }\n  {\n    relModel.nodes.map(({color, max}, i) => {\n      const {x,y} = getPosition(i)\n      return <circle key={i} style={{fill:`hsl(${color}, 100%, 50%)`, zIndex: 10}} cx={x} cy={y} r=\"10\"/>\n    })\n  }\n</svg>\n\nconst {func, shape, object, string, number, arrayOf} = PropTypes;\n\nRelVisualization.propTypes = {\n  width: number,\n  height: number,\n  bits: arrayOf(object),\n  relModel: object,\n  getPosition: func\n};\n\nexport default RelVisualization;\n","import React, {Component} from 'react'\nimport RelModel from '../relmodel'\nimport RelVisualization from './RelVisualization'\n\nclass RelCircle extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      relModel: props.relModel ? props.relModel : new RelModel(props.numNodes),\n      relIndex: 0,\n      stepTimer: null,\n      bitTimer: null,\n      restartTimer: null,\n      bits: []\n    }\n\n    this.getPosition = props.getPosition ? props.getPosition.bind(this) : (n) => {\n      const {height, width, radius, numNodes} = this.props\n      const center = {\n        x: width/2,\n        y: height/2\n      }\n      return {\n        x: Math.sin( 2 * Math.PI * n/numNodes ) * radius + center.x,\n        y: Math.cos( 2 * Math.PI * n/numNodes) * radius + center.y\n      }\n    }\n\n    this.runStep = () => {\n      const {numNodes} = this.props\n      const {relModel, relIndex} = this.state\n      relModel.step(relIndex)\n      this.setState({relIndex: (relIndex + 1) % numNodes})\n    }\n\n    this.runBits = () => {\n      const {relModel} = this.state\n      relModel.bitStep()\n      this.setState({bits: relModel.bits})\n    }\n\n    this.restart = (numNodes) => {\n      const {runStep, runBits} = this\n      clearInterval(this.state.stepTimer)\n      clearInterval(this.state.bitTimer)\n      const stepTimer = setInterval(runStep, 40)\n      const bitTimer = setInterval(runBits, 20)\n      this.setState({\n        relModel: new RelModel(this.props.numNodes),\n        stepTimer,\n        bitTimer,\n        relIndex: 0,\n        bits: []})\n    }\n  }\n\n  componentDidMount() {\n    const {numNodes, restartInterval} = this.props\n    this.restart(this.props.numNodes)\n    if (restartInterval) {\n      const restartTimer = setInterval(() => this.restart(numNodes), restartInterval)\n      this.setState({restartTimer})\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.numNodes !== this.props.numNodes) {\n      this.restart(this.props.numNodes)\n    }\n  }\n\n  componentWillUnmount() {\n    const {stepTimer, bitTimer, restartTimer} = this.state\n    clearInterval(stepTimer)\n    clearInterval(bitTimer)\n    clearInterval(restartTimer)\n  }\n\n  render () {\n    const {height, width} = this.props\n    const {relModel, bits} = this.state\n    return <div style={styles.container}>\n      <RelVisualization\n        width={width}\n        height={height}\n        relModel={relModel}\n        bits={bits}\n        getPosition={this.getPosition} />\n    </div>\n  }\n}\n\nexport default RelCircle;\n\nconst styles = {\n  container: {\n    padding: 20\n  }\n}\n","import React, {Component} from 'react'\nimport RelCircle from './RelCircle'\nimport Slider from '@material-ui/lab/Slider'\n\nclass RelIntro extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      numNodes: 10\n    }\n\n    this.handleSlider = (e, v) => {\n      this.setState({numNodes: v})\n    }\n  }\n\n  render () {\n    const {numNodes} = this.state\n\n    return <div>\n        <RelCircle height={350} width={300} numNodes={numNodes} radius={120}/>\n        <div style={styles.sliderContainer}>\n          <Slider\n            className='slider'\n            value={numNodes}\n            aria-labelledby=\"Number of Nodes\"\n            onChange={this.handleSlider}\n            min={2}\n            max={50}\n            step={1}\n          />\n        </div>\n      </div>\n\n  }\n}\n\nexport default RelIntro;\n\nconst styles = {\n  sliderContainer: {\n    width: 300,\n    margin: 30\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ProbabilityGraph = ({width, height, nodes}) => <svg id=\"probabilities\"\n  width={width}\n  height={height}\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n  {\n    nodes.map(({color, targets}, i) => {\n      const l = targets.length\n      return targets.map((val, j) =>\n        <rect\n          key={`${i}-${j}`}\n          style={{fill:`hsl(${color}, 100%, 50%)`}}\n          x={j * width/l}\n          y={50 * i + 55 - val * 50}\n          width={width / (3*l) - 2}\n          height={val * 50}\n          />\n      )\n    })\n  }\n</svg>\n\nconst {func, shape, object, string, number, arrayOf} = PropTypes;\n\nProbabilityGraph.propTypes = {\n  width: number,\n  height: number,\n  bits: arrayOf(object),\n  relModel: object,\n  getPosition: func\n};\n\nexport default ProbabilityGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst EntropyGraph = ({width, height, nodes}) => <svg id=\"probabilities\"\n  width={width}\n  height={height}\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n  {\n    nodes.map(({color, targets}, i) => {\n      const l = targets.length\n      const entropy = targets.reduce((sum, t) => sum + Math.log1p(t), 0)\n      const maxEntropy = l * Math.log1p(1/l)\n      const minEntropy = Math.log1p(1)\n      return <rect\n          key={`${i}`}\n          style={{fill:`hsl(${color}, 100%, 50%)`}}\n          x={0}\n          y={25 * i}\n          width={(1 - (entropy - minEntropy) / (maxEntropy - minEntropy)) * width }\n          height={20}\n          />\n    })\n  }\n</svg>\n\nconst {func, shape, object, string, number, arrayOf} = PropTypes;\n\nEntropyGraph.propTypes = {\n  width: number,\n  height: number,\n  nodes: arrayOf(number)\n};\n\nexport default EntropyGraph;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst RelationalityGraph = ({width, height, entropy, nodes, numNodes}) => <svg id=\"probabilities\"\n  width={width}\n  height={height}\n  xmlns=\"http://www.w3.org/2000/svg\"\n  xmlnsXlink=\"http://www.w3.org/1999/xlink\">\n  {\n    nodes.map(({color, entropyDeltas}, i) => {\n      const entropyDeltaRange = numNodes * Math.log1p(1/numNodes) - Math.log1p(1)\n      return <svg>\n          <polyline\n          key={`${i}`}\n          style={{stroke:`hsl(${color}, 100%, 50%)`, strokeWidth:1, fill:'none'}}\n          x={0}\n          y={25 * i}\n          points={entropyDeltas.map((d, j) => `${j * width / 100},${d/entropyDeltaRange* 80 + 10 + i * 25}`).join(' ')}\n          />\n          <line\n            key={`base${i}`}\n            style={{stroke:`lightgrey`, strokeWidth:1, fill:'none'}}\n            x1={0}\n            y1={25 * (i + .45)}\n            x2={width - 15}\n            y2={25 * (i + .45)} />\n        </svg>\n\n    })\n  }\n</svg>\n\nconst {func, shape, object, string, number, arrayOf} = PropTypes;\n\nRelationalityGraph.propTypes = {\n  width: number,\n  height: number,\n  nodes: arrayOf(object)\n};\n\nexport default RelationalityGraph;\n","import React, {Component} from 'react'\nimport RelModel from '../relmodel'\nimport ProbabilityGraph from './ProbabilityGraph'\nimport RelVisualization from './RelVisualization'\nimport EntropyGraph from './EntropyGraph'\nimport RelationalityGraph from './RelationalityGraph'\nimport IconButton from '@material-ui/core/IconButton'\nimport ReplayIcon from '@material-ui/icons/Replay'\n\nclass RelDefinition extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      relModel: new RelModel(props.numNodes),\n      relIndex: 0,\n      stepTimer: null,\n      bitTimer: null,\n      restartTimer: null,\n      bits: [],\n      entropy: []\n    }\n\n    this.getPosition = (n) => {\n        const {height, width, numNodes} = this.props\n        const center = {\n          x: width/2,\n          y: height/2\n        }\n\n        if (n === numNodes/4) {\n          return {\n            x: width/3,\n            y: height/2\n          }\n        } else if (n === 3 * numNodes/4) {\n          return {\n            x: 2 * width/3,\n            y: height/2\n          }\n        }\n\n        return {\n          x: Math.sin( 2 * Math.PI * n/numNodes ) * width + center.x,\n          y: Math.cos( 2 * Math.PI * n/numNodes) * width + center.y\n        }\n    }\n\n    this.runStep = () => {\n      const {numNodes, width} = this.props\n      const {relModel, relIndex} = this.state\n      relModel.step(numNodes/4)\n      relModel.step(3 * numNodes/4)\n    }\n\n    this.runBits = props.runBits ? props.runBits.bind(this) : () => {\n      const {relModel} = this.state\n      relModel.bitStep()\n      this.setState({bits: relModel.bits})\n    }\n\n    this.restart = () => {\n        const {runStep, runBits} = this\n        clearInterval(this.state.stepTimer)\n        clearInterval(this.state.bitTimer)\n        const stepTimer = setInterval(runStep, 250)\n        const bitTimer = setInterval(runBits, 20)\n        this.setState({\n          relModel: new RelModel(this.props.numNodes),\n          stepTimer,\n          bitTimer,\n          relIndex: 0,\n          bits: []})\n    }\n  }\n\n  componentDidMount() {\n    const {numNodes} = this.props\n    this.restart(this.props.numNodes)\n  }\n\n  componentWillUnmount() {\n    const {stepTimer, bitTimer, restartTimer} = this.state\n    clearInterval(stepTimer)\n    clearInterval(bitTimer)\n    clearInterval(restartTimer)\n  }\n\n  render() {\n    const {height, width, showProbabilities, numNodes} = this.props\n    const {relModel, bits, entropy} = this.state\n    return <div style={styles.container}>\n      <RelVisualization\n        width={width}\n        height={height}\n        relModel={relModel}\n        bits={bits}\n        getPosition={this.getPosition}\n        entropy={entropy} />\n        <IconButton aria-label=\"Restart\" onClick={this.restart}>\n          <ReplayIcon fontSize=\"medium\" />\n        </IconButton>\n      {\n        showProbabilities &&\n        <div>\n          <div style={styles.text}>\n            As relationships form, the probability distributions within a system become more stable.\n          </div>\n          <ProbabilityGraph\n            width={width}\n            height={110}\n            nodes={[relModel.nodes[numNodes/4], relModel.nodes[3 * numNodes/4]]} />\n          <div style={styles.text}>\n            A variable called <a href=\"https://en.wikipedia.org/wiki/Entropy\">entropy</a> measures the randomness of these probability distrubutions,\n            by inverting it we get a nice number that goes up as nodes in the system become more stable.\n          </div>\n          <EntropyGraph\n            width={width}\n            height={50}\n            nodes={[relModel.nodes[numNodes/4], relModel.nodes[3 * numNodes/4]]} />\n          <div style={styles.text}>\n            It can also be helpful to examine how quickly a system forms stable relationships.\n            This \"speed of relationship\" is what we will call \"relationality.\"\n          </div>\n          <RelationalityGraph\n            width={width}\n            height={50}\n            nodes={[relModel.nodes[numNodes/4], relModel.nodes[3 * numNodes/4]]}\n            numNodes={relModel.nodes.length} />\n          <div style={styles.text}>\n            Examining the relationality of a system can give insight into how it\n            will behave. Some systems are more relational than others (they have a greater)\n            \"speed of relationship\". With enough knowledge, one can intervene\n            in systems to make them more or less relational. But there are limits.\n          </div>\n        </div>\n      }\n    </div>\n  }\n\n}\n\nexport default RelDefinition\n\nconst styles = {\n  container: {\n    padding: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  text: {\n    marginTop: 20,\n    marginBottom: 10\n  }\n}\n","import React, {Component} from 'react'\nimport RelModel from '../relmodel'\nimport RelVisualization from './RelVisualization'\nimport IconButton from '@material-ui/core/IconButton'\nimport ReplayIcon from '@material-ui/icons/Replay'\n\nclass RelColor extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      relModel: new RelModel(4, 1),\n      relIndex: 0,\n      stepTimer: null,\n      bitTimer: null,\n      restartTimer: null,\n      bits: []\n    }\n\n    this.getPosition = (n) => {\n      const {height, width, radius} = this.props\n      const center = {\n        x: width/2,\n        y: height/2\n      }\n      return {\n        x: Math.sin( 2 * Math.PI * n/4 ) * radius + center.x,\n        y: Math.cos( 2 * Math.PI * n/4) * radius + center.y\n      }\n    }\n\n    this.runStep = () => {\n      const {relModel, relIndex} = this.state\n      relModel.step(relIndex)\n      this.setState({relIndex: (relIndex + 1) % 4})\n    }\n\n    this.runBits = () => {\n      const {relModel} = this.state\n      relModel.bitStep()\n      this.setState({bits: relModel.bits})\n    }\n\n    this.restart = () => {\n      const {runStep, runBits} = this\n      clearInterval(this.state.stepTimer)\n      clearInterval(this.state.bitTimer)\n      const stepTimer = setInterval(runStep, 100)\n      const bitTimer = setInterval(runBits, 20)\n      this.setState(() => {\n        const relModel = new RelModel(4, .1, 1, 1, .1)\n        relModel.nodes[0].color = 100\n        relModel.nodes[1].color = 100\n        relModel.nodes[2].color = 300\n        relModel.nodes[3].color = 300\n        return {\n          relModel,\n          stepTimer,\n          bitTimer,\n          relIndex: 0,\n          bits: []\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    const {restartInterval} = this.props\n    this.restart()\n    if (restartInterval) {\n      const restartTimer = setInterval(() => this.restart(), restartInterval)\n      this.setState({restartTimer})\n    }\n  }\n\n  componentWillUnmount() {\n    const {stepTimer, bitTimer, restartTimer} = this.state\n    clearInterval(stepTimer)\n    clearInterval(bitTimer)\n    clearInterval(restartTimer)\n  }\n\n  render () {\n    const {height, width} = this.props\n    const {relModel, bits} = this.state\n    return <div style={styles.container}>\n      <RelVisualization\n        width={width}\n        height={height}\n        relModel={relModel}\n        bits={bits}\n        getPosition={this.getPosition} />\n        <IconButton aria-label=\"Restart\" onClick={this.restart}>\n          <ReplayIcon fontSize=\"medium\" />\n        </IconButton>\n    </div>\n  }\n}\n\nexport default RelColor;\n\nconst styles = {\n  container: {\n    padding: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  }\n}\n","import React, {Component} from 'react'\nimport RelModel from '../relmodel'\nimport RelVisualization from './RelVisualization'\nimport Slider from '@material-ui/lab/Slider'\n\nclass RelTemperature extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      temperature: .25,\n      relModel: props.relModel ? props.relModel : new RelModel(props.numNodes),\n      relIndex: 0,\n      stepTimer: null,\n      bitTimer: null,\n      restartTimer: null,\n      bits: []\n    }\n\n    this.handleSlider = (e, v) => {\n      this.setState({temperature: v})\n      console.log(v);\n    }\n\n    this.getPosition = n => {\n      const {height, width, numNodes} = this.props\n      const center = {\n        x: width/2,\n        y: height/2\n      }\n\n      if (n === numNodes/4) {\n        return {\n          x: width/3,\n          y: height/2\n        }\n      } else if (n === 3 * numNodes/4) {\n        return {\n          x: 2 * width/3,\n          y: height/2\n        }\n      }\n\n      return {\n        x: Math.sin( 2 * Math.PI * n/numNodes ) * width + center.x,\n        y: Math.cos( 2 * Math.PI * n/numNodes) * width + center.y\n      }\n    }\n\n    this.runStep = () => {\n      const {numNodes} = this.props\n      const {relModel, relIndex, temperature} = this.state\n      if (Math.random() < temperature || relIndex === numNodes/4 || relIndex === 3 * numNodes/4) {\n          relModel.step(relIndex)\n          for (var i = 0; i < relModel.nodes.length; i++) {\n            if (i !== numNodes/4 && i !== 3 * numNodes/4) {\n              relModel.nodes[i].targets = Array(numNodes).fill(1/numNodes)\n              relModel.nodes[i].targets[numNodes/4]=3/numNodes\n              relModel.nodes[i].targets[3 * numNodes/4]=3/numNodes\n              relModel.normalize(relModel.nodes[i])\n              relModel.nodes[i].color = Math.random() * 360\n            }\n          }\n      }\n      this.setState({relIndex: (relIndex + 1) % numNodes})\n    }\n\n    this.runBits = () => {\n      const {relModel} = this.state\n      relModel.bitStep()\n      this.setState({bits: relModel.bits})\n    }\n\n    this.restart = () => {\n        const {runStep, runBits} = this\n        clearInterval(this.state.stepTimer)\n        clearInterval(this.state.bitTimer)\n        const stepTimer = setInterval(runStep, 30)\n        const bitTimer = setInterval(runBits, 20)\n        this.setState({\n          relModel: new RelModel(this.props.numNodes),\n          stepTimer,\n          bitTimer,\n          relIndex: 0,\n          bits: []})\n    }\n  }\n\n  componentDidMount() {\n    const {numNodes} = this.props\n    this.restart(numNodes)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {temperature, stepTimer} = this.state\n    if (prevState.temperature !== temperature) {\n      clearInterval(this.state.stepTimer)\n      const stepTimer = setInterval(this.runStep, 30)\n      this.setState({stepTimer})\n    }\n\n  }\n\n  componentWillUnmount() {\n    const {stepTimer, bitTimer, restartTimer} = this.state\n    clearInterval(stepTimer)\n    clearInterval(bitTimer)\n  }\n\n  render() {\n    const {width, height} = this.props\n    const {temperature, bits, relModel} = this.state\n    return <div>\n        <RelVisualization\n          width={width}\n          height={height}\n          relModel={relModel}\n          bits={bits}\n          getPosition={this.getPosition} />\n        <Slider\n          className='temperatureSlider'\n          value={temperature}\n          aria-labelledby=\"Relational Temperature\"\n          onChange={this.handleSlider}\n          min={0}\n          max={1}\n        />\n    </div>\n  }\n\n}\n\nexport default RelTemperature\n","import React, {Component} from 'react'\nimport RelIntro from './RelIntro'\nimport RelDefinition from './RelDefinition'\nimport RelTemperature from './RelTemperature'\nimport RelColor from './RelColor'\n\nclass App extends Component {\n\n\n\n  render () {\n    return <div style={styles.pageContainer}>\n      <div className=\"App\" style={styles.container}>\n        <h1>Relationality</h1>\n        {\n          // <h3>A mathematical framework for the measurement and prediction of relationship formation.</h3>\n          // <RelIntro/>\n          // <div style={styles.explainer}>\n          //   An example of a mathematical model in which flows of information move\n          //   from randomness to stability.<br/>\n          //   Color illustrates how relational dynamics alter the state of a system\n          //   over time.\n          // </div>\n          // <h3>Why Measure and Predict Relationships?</h3>\n          // <div style={styles.paragraph}>\n          //   In 1949 a landmark scientific paper described a mathematical framework\n          //   for measuring information in bits.\n          //   This framework allowed scientists and engineers to precisely understand\n          //   how information would behave regardless of what kind of information it was.\n          //   By figuring out how to send, store and processing bits, scientists could\n          //   send, store and process any kind of information.\n          // </div>\n          // <div style={styles.paragraph}>\n          //   This project seeks to create a similar mathematical framework for\n          //   relationships, one that will allow precise and meaningful predictions\n          //   to be made about relationships regardless of the kind of relationships\n          //   involved. The goal is not to control the outcome of relationships (in fact\n          //   there are hard mathematical limits to such control), but to enable richer\n          //   conversation about how to create environments in which relationships thrive.\n          // </div>\n          // <h3>What is a Relationship?</h3>\n          // <div style={styles.paragraph}>\n          //   While relationships between humans are very different from\n          //   relationships between bacteria or relationships between atoms, all involve\n          //   <b> dynamic flows of information with the ability to stabilize over time. </b>\n          //   By examining the fundamental properties of such flows of information\n          //   it is possible to map out universal dynamics which all relationships\n          //   share.\n          // </div>\n          // <h4>Relationships Move From Chaos To Stability</h4>\n          // <RelDefinition height={150} width={300} numNodes={20}/>\n          // <div style={styles.paragraph}>\n          //   Relationships form when information being randomly transmitted across\n          //   a system finds a self-reinforcing feedback loop. These stable flows of\n          //   information go on to reshape the entities sending and receiving them.\n          // </div>\n          // <h4>Some Relationships Are More Likely To Form Than Others</h4>\n          // <RelColor height={200} width={200} radius={70}/>\n          // <div style={styles.paragraph}>\n          //   Different kinds of information will have different impacts on a system.\n          //   Information which changes how something behaves (that is, changes how it sends\n          //   its own information out to the world) is more likely to result in a relationship\n          //   than information which doesn't.\n          // </div>\n          // <h4>Relationship Often Form In A Noisy Environment</h4>\n          // <RelTemperature height={150} width={300} numNodes={20}/>\n          // <div style={styles.paragraph}>\n          //   Most relationships do not happen in a vacuum. New information from\n          //   the surrounding environment constantly disrupts stable relational states.\n          //   To persist, relationships must not only establish a stable flow of information,\n          //   but continuously re-establish that flow in response to external stress.\n          // </div>\n        }\n\n        <h3>How Can We Measure Relationships?</h3>\n        <div style={styles.paragraph}>\n          A metric can never capture the full complexity of a relationship the way\n          that a series of bits can never fully capture a the experience of listening to music.\n          But relational measurement can help us to make sense of relationships and\n          facilitate their growth.\n        </div>\n        <h4>We Measure Relationships By Measuring How Order Emerges From Disorder</h4>\n        <RelDefinition height={150} width={300} numNodes={20} showProbabilities/>\n      </div>\n    </div>\n  }\n}\n\nexport default App\n\nconst styles = {\n  pageContainer: {\n    width: 'calc(100%-40px)',\n    padding: 20,\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    paddingBottom: 80,\n    fontFamily: 'Montserrat'\n  },\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    maxWidth: 900,\n    textAlign: 'center'\n  },\n  explainer: {\n    fontStyle: 'italic',\n    color: 'grey'\n  },\n  paragraph: {\n    fontSize: 14,\n    textAlign: 'left',\n    padding: 10\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}